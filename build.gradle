buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'org.ajoberstar:gradle-git:0.10.1'
    }
}

apply plugin: 'forge'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = "com.teamdman_9201.nova"
archivesBaseName = "NOVA"
version = "${getDate()}"

import org.ajoberstar.grgit.Grgit

def gitHash = 'unknown'
if (new File(projectDir, '.git').exists()) {
    def repo = Grgit.open(project.file('.'))
    gitHash = repo.log().find().abbreviatedId
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

ext.configFile = file "build.properties"
configFile.withReader {
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


minecraft {
    version = config.mc_version + "-" + config.forge_version
    runDir = "run"

    replaceIn "NOVA.java"
    replace "@VERSION@", getDate()

    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
}


processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}
repositories {
    maven { // GUIDEAPI
        url 'http://tehnut.info/maven/'
    }

    maven { // WAILA
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // CCC/NEI (for WAILA)
        name "Chicken Bones Repo"
        url "http://chickenbones.net/maven/"
    }
    ivy {
        name "Thaumcraft"
        artifactPattern "http://addons-origin.cursecdn.com/files/2227/552/[module]-[revision].[ext]"
    }
    ivy {
        name "Baubles"
        artifactPattern "https://dl.dropboxusercontent.com/u/47135879/[module]-deobf-1.7.10-[revision].[ext]"
    }
}

dependencies {
    compile "mcp.mobius.waila:Waila:1.5.5_1.7.10"
    compile "codechicken:CodeChickenLib:1.7.10-1.1.1.104:dev"
    compile "codechicken:CodeChickenCore:1.7.10-1.0.3.26:dev"
    compile "codechicken:NotEnoughItems:1.7.10-1.0.3.64:dev"
    compile "info.amerifrance.guideapi:Guide-API:1.7.10-1.0.1-20:deobf"
    compile fileTree(dir: 'libs', include: '*.jar')
}

task copyModDeps(type: Copy, dependsOn: "extractUserDev") {
    from { configurations.compile }
    include "**/*CodeChickenCore*.jar", "**/*NotEnoughItems*.jar"
    into file(minecraft.runDir + "/mods")

    mustRunAfter "deobfBinJar"
    mustRunAfter "repackMinecraft"
}

jar {
    dependsOn "incrementBuildNumber"
    classifier = 'universal'
    manifest.mainAttributes(
            "Built-By": System.getProperty('user.name'),
            "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Git-Hash": gitHash
    )
}

// add a source jar
task sourceJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

// add a javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

tasks.build.dependsOn sourceJar, javadocJar, deobfJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}

task("incrementBuildNumber") {
    // increment build number
    doFirst {
        // increment
        config.build_number = (config.build_number.toString().toInteger()) + 1

        // write back to the file
        configFile.withWriter {
            config.toProperties().store(it, "")
        }
    }
}

//because IDEA is stupido :(
idea { module { inheritOutputDirs = true } }