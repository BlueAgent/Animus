buildscript {
    repositories {
        mavenCentral()
        maven { url "http://files.minecraftforge.net/maven" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
    dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
    id 'com.matthewprenger.cursegradle' version '1.0.9'
	id 'io.franzbecker.gradle-lombok' version '1.6'
	id 'maven-publish'
}

version = "${getDate()}"
group= "com.teamdman.animus"
archivesBaseName = "Animus"

def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}


sourceCompatibility = targetCompatibility = "1.8"
compileJava {
    sourceCompatibility = targetCompatibility = "1.8"
}

minecraft {
    version = "${mc_version}-${forge_version}"
    runDir = "run"

    replace "@VERSION@", project.version
    replaceIn "Animus.java"


    clientRunArgs += "--username=AnimusDev"
    if (project.hasProperty('mappings_version'))
        mappings = project.mappings_version
 
}


repositories {
    maven { // JEI
	    name "JEI Repo"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven {	// BloodMagic
	    name "TehNut Repo"
		url "http://tehnut.info/maven" 
	}
}

dependencies {
    deobfCompile "mezz.jei:jei_${mc_version}:${jei_version}"   
    deobfCompile "mcp.mobius.waila:Hwyla:${waila_version}"
	deobfCompile "info.amerifrance.guideapi:Guide-API:${major_version}-${guideapi_version}"
    deobfCompile "com.wayoftime.bloodmagic:BloodMagic:${bloodmagic_version}"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        include '**/*.properties'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
        exclude '**/*.properties'
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

jar {
    classifier = ''
    manifest.mainAttributes(
        "Built-By": System.getProperty('user.name'),
        "Created-By": "${System.getProperty('java.vm.version')} + (${System.getProperty('java.vm.vendor')})",
        "Implementation-Title": project.name,
        "Implementation-Version": project.version,
        "Built-On": "${mc_version}-${forge_version}"
    )
}

// Javadoc jar
task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    classifier = 'javadoc'
}
tasks.build.dependsOn javadoc, javadocJar

tasks.withType(JavaCompile) { task ->
    task.options.encoding = 'UTF-8'
}


